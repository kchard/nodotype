var assert = require("assert");var daoFactory = require("../../src/dao/daoFactory");var testGetAll = function() {	var dao = daoFactory.create([{id: 1}]);	dao.getAll(function(data) {		assert.deepEqual(data, [{id: 1}]);	});}var testGetNonExistentItem = function() {	var dao = daoFactory.create([]);	dao.get(1, function(data) {		assert.ok(false);	},function() {		assert.ok(true);	});}var testGet = function() {	var dao = daoFactory.create([{id: 1}]);	dao.get(1, function(data) {		assert.deepEqual(data, {id: 1});	}, function() {		assert.ok(false);	});}var testCreateFirstItem = function() {	var dao = daoFactory.create([]);	dao.create({}, function(data) {		assert.deepEqual(data, {id: 1});	}, function() {		assert.ok(false);	});		dao.get(1, function(data) {		assert.deepEqual(data, {id: 1});	}, function() {		assert.ok(false);	});}var testCreate = function() {	var dao = daoFactory.create([{id: 1}]);	dao.create({}, function(data) {		assert.deepEqual(data, {id: 2});	}, function() {		assert.ok(false);	});		dao.get(2, function(data) {		assert.deepEqual(data, {id: 2});	}, function() {		assert.ok(false);	});}var testDelete = function() {	var dao = daoFactory.create([{id: 1}]);		dao.get(1, function(data) {		assert.deepEqual(data, {id: 1});	}, function() {		assert.ok(false);	});		dao.destroy(1, function() {		assert.ok(true);	}, function() {		assert.ok(false);	});		dao.get(1, function(data) {		assert.ok(false);	}, function() {		assert.ok(true);	});}exports.run = function() {	testGetAll();	testGetNonExistentItem();	testGet();	testCreateFirstItem();	testCreate();	testDelete();};